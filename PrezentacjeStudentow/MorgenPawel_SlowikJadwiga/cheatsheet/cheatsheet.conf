{
  "name": "rex",
  "description": "Friendly Regular Expressions",
  "footer": "More at: https://github.com/kevinushey/rex",
  "pages": [
    {
      "cards": [
        {
          "title": "Regex usage",
          "methods": [
            {
              "name": "rex",
              "description": "generate a regular expression",
              "params": [
                {
                  "name": "..."
                },
                {
                  "name": "env=parent.frame()"
                }
              ]
            },
            {
              "name": "re_matches",
              "description": "match function",
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "pattern"
                },
                {
                  "name": "global=FALSE"
                },
                {
                  "name": "options=NULL"
                },
                {
                  "name": "locations=FALSE"
                },
                {
                  "name": "..."
                }
              ]
            },
            {
              "name": "re_substitutes",
              "description": "substitute regular expressions in a string with another string",
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "pattern"
                },
                {
                  "name": "replacement"
                },
                {
                  "name": "global=FALSE"
                },
                {
                  "name": "options=NULL"
                },
                {
                  "name": "..."
                }
              ]
            },
            {
              "name": "rex_mode",
              "description": "While within rex mode, functions used within the rex function are attached, so one can get e.g. auto-completion within editors"
            }
          ]
        },
        {
          "title": "Groups",
          "methods": [
            {
              "name": "capture",
              "description": "create a capture group",
              "params": [
                {
                  "name": "..."
                },
                {
                  "name": "name=NULL"
                }
              ]
            },
            {
              "name": "group",
              "description": "similar to capture except that it does not store the value of the group",
              "params": [
                {
                  "name": "..."
                }
              ]
            },
            {
              "name": "capture_group",
              "description": "use a captured value",
              "params": [
                {
                  "name": "name"
                }
              ]
            }
          ]
        },
        {
          "title": "Shortcuts",
          "methods": [
            {
              "name": "start",
              "description": "^",
              "withoutBrackets": true
            },
            {
              "name": "end",
              "description": "$",
              "withoutBrackets": true
            },
            {
              "name": "any",
              "description": ".",
              "withoutBrackets": true
            },
            {
              "name": "anything",
              "description": ".*",
              "withoutBrackets": true
            },
            {
              "name": "something",
              "description": ".+",
              "withoutBrackets": true
            },
            {
              "name": "letter",
              "description": "[[:alpha:]]",
              "withoutBrackets": true
            },
            {
              "name": "number",
              "description": "[[:digit:]]",
              "withoutBrackets": true
            },
            {
              "name": "letters",
              "description": "[[:alpha:]]+",
              "withoutBrackets": true
            },
            {
              "name": "numbers",
              "description": "[[:digit:]]+",
              "withoutBrackets": true
            },
            {
              "name": "alnum",
              "description": "[[:alnum:]]",
              "withoutBrackets": true
            },
            {
              "name": "space",
              "description": "[[:space:]]",
              "withoutBrackets": true
            },
            {
              "name": "names(shortcuts)",
              "description": "a complete list of shortcuts",
              "withoutBrackets": true
            }
          ]
        },
        {
          "title": "Character classes",
          "methods": [
            {
              "name": "character_class(\"abc123\") \n one_of(\"abc123\")",
              "description": "[abc123]",
              "withoutBrackets": true
            },
            {
              "name": "range(\"a\", \"j\") \n \"a\":\"j\"",
              "description": "[a-j]",
              "withoutBrackets": true
            },
            {
              "name": "any_of(\"abc\")",
              "description": "[abc]*",
              "withoutBrackets": true
            },
            {
              "name": "some_of(\"abc\")",
              "description": "[abc]+",
              "withoutBrackets": true
            },
            {
              "name": "none_of(\"abc\")",
              "description": "[^abc]",
              "withoutBrackets": true
            },
            {
              "name": "except_any_of(\"abc\")",
              "description": "[^abc]*",
              "withoutBrackets": true
            },
            {
              "name": "except_some_of(\"abc\")",
              "description": "[^abc]+",
              "withoutBrackets": true
            }
          ]
        },
        {
          "title": "Good to know",
          "methods": [
            {
              "name": "",
              "description": "Rex is based on PCRE, thus if you want to use a rex regular expression in grepl, you have to use flag perl=TRUE explicitly",
              "withoutBrackets": true
            }
          ]
        }
      ]
    },
    {
      "cards": [
        {
          "title": "Counts",
          "methods": [
            {
              "name": "n_times",
              "description": "n_times(\"abc\", 5) → (?:abc){5}",
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "n"
                },
                {
                  "name": "type=c(\"greedy\", \"lazy\", \"possessive\")"
                }
              ]
            },
            {
              "name": "between",
              "description": "between(\"abc\", 5, 10) → (?:abc){5, 10}",
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "low"
                },
                {
                  "name": "high"
                },
                {
                  "name": "type=c(\"greedy\", \"lazy\", \"possessive\")"
                }
              ]
            },
            {
              "name": "at_least",
              "description": "at_least(\"abc\", 5) → (?:abc){5, }",
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "n"
                },
                {
                  "name": "type=c(\"greedy\", \"lazy\", \"possessive\")"
                }
              ]
            },
            {
              "name": "at_most",
              "description": "at_most(\"abc\", 5) → (?:abc){,5}",
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "n"
                },
                {
                  "name": "type=c(\"greedy\", \"lazy\", \"possessive\")"
                }
              ]
            }
          ]
        },
        {
          "title": "Wildcards",
          "methods": [
            {
              "name": "zero_or_more",
              "description": "(?:...)*",
              "params": [
                {
                  "name": "..."
                },
                {
                  "name": "type=c(\"greedy\", \"lazy\", \"possessive\")"
                }
              ]
            },
            {
              "name": "one_or_more",
              "description": "(?:...)+",
              "params": [
                {
                  "name": "..."
                },
                {
                  "name": "type=c(\"greedy\", \"lazy\", \"possessive\")"
                }
              ]
            },
            {
              "name": "maybe",
              "description": "(?:...)?",
              "params": [
                {
                  "name": "..."
                },
                {
                  "name": "type=c(\"greedy\", \"lazy\", \"possessive\")"
                }
              ]
            }
          ]
        },
        {
          "title": "Connectors",
          "methods": [
            {
              "name": "or",
              "description": "specify set of optional matches, useful for more than 2 arguments",
              "params": [
                {
                  "name": "..."
                }
              ]
            },
            {
              "name": "x %or% y",
              "description": "x | y",
              "withoutBrackets": true
            },
            {
              "name": "not",
              "description": "do not match",
              "params": [
                {
                  "name": "..."
                },
                {
                  "name": "type=c(\"greedy\", \"lazy\", \"possessive\")"
                }
              ]
            }
          ]
        },
        {
          "title": "Lookarounds",
          "methods": [
            {
              "name": "x %if_next_is% y",
              "description": "TRUE if x follows y",
              "withoutBrackets": true,
              "params": [
                {
                  "name": "x",
                  "description": "a regex pattern"
                },
                {
                  "name": "y",
                  "description": "a regex pattern"
                }
              ]
            },
            {
              "name": "x %if_next_isnt% y",
              "description": "TRUE if x does not follow y",
              "withoutBrackets": true
            },
            {
              "name": "x %if_prev_is% y",
              "description": "TRUE if y comes before x",
              "withoutBrackets": true
            },
            {
              "name": "x %if_prev_isnt% y",
              "description": "TRUE if y does not come before x",
              "withoutBrackets": true
            }
          ]
        }
      ]
    }
  ]
}
